import {useEffect, useState, useRef} from 'react';
import Head from '../node_modules/next/head';
import { Contract, providers } from 'ethers';
import { formatEther } from '../node_modules/ethers/lib/utils';
import Web3Modal from 'web3modal';
import { KhaNFTContractAddress,
         KHANFTCONTRACTABI,
         DAO_CONTRACT_ADDRESS,
         DAO_CONTRACT_ABI
        } from '../Constants/constants';
import { toast } from 'react-toastify';

const DAO = (): JSX.Element => {

  const [walletConnected, setWalletConnected] = useState <boolean> (false);

  const [treasuryBalance, setTreasuryBalance] = useState <string> ("0");

  const [numProposals, setNumProposals] = useState <string> ("0");

  const [nftBalance, setNftBalance] = useState <number> (0);




  const web3modalRef = useRef<any>();

  
  const getProviderOrSigner = async (needSigner: boolean = false): Promise <void> => {
    const provider = await web3modalRef.current.connect();
    const web3Provider: any = new providers.Web3Provider(provider);
    
    const { chainId } = await web3Provider.getNetwork();
    
    if(chainId !== 80001) {
      toast.warning("Change your network to Mumbai");
      throw new Error("Change your network to Polygon Mumbai");
    }
    
    if(needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  }
  
  const connectWallet = async (): Promise <void> => {
    try {
        await getProviderOrSigner();
        setWalletConnected(true);
    } catch (err) {
      console.error(err)
    }
  }

  const getDAOContractInstance = (providerOrSigner): void => {
    return new Contract(
      DAO_CONTRACT_ADDRESS,
      DAO_CONTRACT_ABI,
      providerOrSigner
    );
  }

  const getNFTContractInstance = (providerOrSigner): void => {
    return new Contract(
      KhaNFTContractAddress,
      KHANFTCONTRACTABI,
      providerOrSigner
    );
  }

  console.log(nftBalance)
  const getUserNFTBalance = async (): Promise <void> => {
    try {
      const signer: any = await getProviderOrSigner(true);
      const nftContract: Contract = getNFTContractInstance(signer);

      const balance: number = await nftContract.balanceOf(signer.getAddress());
      setNftBalance(parseInt(balance.toString()));

    } catch (err) {
      console.error(err)
    }
  }

  const getDAOTreasuryBalance = async (): Promise <void> => {
    try{
      const provider: any = await getProviderOrSigner(false);

      const balance: string = await provider.getBalance(
        DAO_CONTRACT_ADDRESS
      );
      setTreasuryBalance(balance.toString());
    } catch(err) {
      console.error(err)
    }

  }

  const getNumProposalsInDAO = async (): Promise <void> => {
    try {
      const provider = await getProviderOrSigner(false);

      const contract: Contract = getDAOContractInstance(provider);
      const daoNumProposals: string = await contract.numProposals();
      setNumProposals(daoNumProposals.toString());
      console.log("function called", numProposals)
    } catch (err) {
      console.error(err);
    }
  }



  useEffect(() => {
    if(!walletConnected) {
      web3modalRef.current = new Web3Modal({
        network: "mumbai",
        providerOptions: {},
        disableInjectedProvider: false
      });
      connectWallet().then(() => {
        getDAOTreasuryBalance();
        getNumProposalsInDAO();
        getUserNFTBalance();
      })
    }
  }, [walletConnected])

  return (
    <main className="h-screen bg-cover bg-[url('/img/ethereum.jpeg')]">
      <Head>
        <title>LW3 Sophomore Dapps</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <style>
          @import
          url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,700;1,400&display=swap');
        </style>
      </Head>
      <div className='flex flex-col items-center justify-center h-96'>
        <h1 className='text-4xl text-black'>Welcome to the DAO</h1>
        <div className='text-2xl text-center my-2 text-white'>
          Your KhaNFT Balance: {nftBalance}
          <br />
          Treasury Balance: {formatEther(treasuryBalance)} ETH
          <br />
          Total Number of Proposals: {formatEther(numProposals)}
        </div>
        <div>
          <button className='p-2 rounded bg-indigo-500 text-white hover:bg-indigo-400'>
            Create Proposal
          </button>
          <button className='p-2 rounded bg-cyan-300 text-black hover:bg-cyan-200 ml-2'>
            View Proposals
          </button>
        </div>
        {/* {renderTabs()} */}
      </div>

      </main>
  )
}

export default DAO