import {useState, useEffect, useRef} from 'react';
import Head from '../node_modules/next/head';
import { BigNumber, Contract, providers, utils } from '../node_modules/ethers/lib/ethers';
import Web3Modal from 'web3modal';
import { 
     KhaNFTContractAddress,
     KHANFTCONTRACTABI,
     KHANFT_TOKEN_ADDRESS,
     KHANFT_TOKEN_CONTRACT_ABI
 } from '../Constants/constants';
import { toast } from '../node_modules/react-toastify/dist/index';


const ICO = () => {

    const zero: number = BigNumber.from(0);

    const [walletConnected, setWalletConnected] = useState <boolean> (false);

    const [loading, setLoading] = useState <boolean> (false);

    const [tokensToBeClaimed, setTokensToBeClaimed] = useState <number> (zero);
    
    const [balanceOfKhaNftTokens, setBalanceOfKhaNftTokens] = useState <number> (zero);

    const [tokenAmount, setTokenAmount] = useState <number> (zero);

    const [tokensMinted, setTokensMinted] = useState <number> (zero);

    const [isOwner, setIsOwner] = useState <boolean> (false);

    const web3ModalRef = useRef<any>();

    const getProviderOrSigner = async (needSigner: boolean = false): Promise <any> => {
        const provider = await web3ModalRef.current.connect();
        const web3Provider = await providers.Web3Provider(provider);

        const { chainId } = await web3Provider.getNetwork();

        if (chainId !== 80001) {
            toast.warning("Change your network to Mumbai!");
            throw new Error ("Change your network to Polygon Testnet!");
        }

        if (needSigner) {
            const signer = web3Provider.getSigner();
            return signer;
        }
        return web3Provider;
    }

    const getTokensToBeClaimed = async (): Promise <void> => {
        try {
            const provider = await getProviderOrSigner();

            const nftContract = new Contract(
                KhaNFTContractAddress,
                KHANFTCONTRACTABI,
                provider
            );

            const tokenContract = new Contract(
                KhaNFTContractAddress,
                KHANFTCONTRACTABI,
                provider
            );

            const signer: any = await getProviderOrSigner(true);
            const address: string = await signer.getAddress();
            const balance: number = await nftContract.balanceOf(address);
            
            if (balance === zero) {
                setTokensMinted(zero);
            }
            else {
                let amount = 0;

                for(let i: number = 0; i < balance; i++) {
                    const tokenId: number = await nftContract.tokenOfOwnerByIndex(address, i);
                    const claimed: boolean = await tokenContract.tokenIdsClaimed(tokenId);
                    if(!claimed) {
                        amount++;
                    }
                }
                setTokensToBeClaimed(BigNumber.from(amount));
            }
            
        } 
        catch (err) {
            console.error(err)
        }
    }











  return (
    <main className="h-screen bg-cover bg-[url('/img/ethereum.jpeg')]" >
        <Head>
        <title>LW3 Sophomore Dapps</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,700;1,400&display=swap');
        </style>
      </Head>
      <div className='flex flex-col items-center h-96 justify-center'>
        <h1 className='text-5xl text-center py-4 text-white'>
            Initial Coin Offering
        </h1>
        {/* {renderButton()} */}
        <p className='text-3xl'>You can claim or mint KhaNFT Tokens here!</p>

    </div>
    </main>
  )
}

export default ICO